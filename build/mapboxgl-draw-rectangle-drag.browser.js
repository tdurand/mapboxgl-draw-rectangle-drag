var mapboxGLDrawRectangleDrag=function(){"use strict";var t={centimeters:637100880,centimetres:637100880,degrees:6371008.8/111325,feet:20902260.511392,inches:6371008.8*39.37,kilometers:6371.0088,kilometres:6371.0088,meters:6371008.8,metres:6371008.8,miles:3958.761333810546,millimeters:6371008800,millimetres:6371008800,nauticalmiles:6371008.8/1852,radians:1,yards:6371008.8*1.0936};function e(t){return 180*(t%(2*Math.PI))/Math.PI}function o(t){return t%360*Math.PI/180}function r(t){return!isNaN(t)&&null!==t&&!Array.isArray(t)}function n(t){if(!t)throw new Error("coord is required");if(!Array.isArray(t)){if("Feature"===t.type&&null!==t.geometry&&"Point"===t.geometry.type)return t.geometry.coordinates;if("Point"===t.type)return t.coordinates}if(Array.isArray(t)&&t.length>=2&&!Array.isArray(t[0])&&!Array.isArray(t[1]))return t;throw new Error("coord must be GeoJSON Point or an Array of numbers")}function a(e,r,a){void 0===a&&(a={});var i=n(e),s=n(r),l=o(s[1]-i[1]),u=o(s[0]-i[0]),c=o(i[1]),d=o(s[1]),g=Math.pow(Math.sin(l/2),2)+Math.pow(Math.sin(u/2),2)*Math.cos(c)*Math.cos(d);return function(e,o){void 0===o&&(o="kilometers");var r=t[o];if(!r)throw new Error(o+" units is invalid");return e*r}(2*Math.atan2(Math.sqrt(g),Math.sqrt(1-g)),a.units)}function i(a,i,s,l){void 0===l&&(l={});var u=n(a),c=o(u[0]),d=o(u[1]),g=o(s),h=function(e,o){void 0===o&&(o="kilometers");var r=t[o];if(!r)throw new Error(o+" units is invalid");return e/r}(i,l.units),M=Math.asin(Math.sin(d)*Math.cos(h)+Math.cos(d)*Math.sin(h)*Math.cos(g));return function(t,e,o){if(void 0===o&&(o={}),!t)throw new Error("coordinates is required");if(!Array.isArray(t))throw new Error("coordinates must be an Array");if(t.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!r(t[0])||!r(t[1]))throw new Error("coordinates must contain numbers");return function(t,e,o){void 0===o&&(o={});var r={type:"Feature"};return(0===o.id||o.id)&&(r.id=o.id),o.bbox&&(r.bbox=o.bbox),r.properties=e||{},r.geometry=t,r}({type:"Point",coordinates:t},e,o)}([e(c+Math.atan2(Math.sin(g)*Math.sin(h)*Math.cos(d),Math.cos(h)-Math.sin(d)*Math.sin(M))),e(M)],l.properties)}function s(t,r,a){if(void 0===a&&(a={}),!0===a.final)return function(t,e){var o=s(e,t);return o=(o+180)%360}(t,r);var i=n(t),l=n(r),u=o(i[0]),c=o(l[0]),d=o(i[1]),g=o(l[1]),h=Math.sin(c-u)*Math.cos(g),M=Math.cos(d)*Math.sin(g)-Math.sin(d)*Math.cos(g)*Math.cos(c-u);return e(Math.atan2(h,M))}return{onSetup(){const t=this.newFeature({type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[]]}});var e;return this.addFeature(t),this.clearSelectedFeatures(),this.updateUIClasses({mouse:"add"}),this.setActionableState({trash:!0}),e=this,setTimeout(()=>{const{map:t}=e,o=t&&t.doubleClickZoom;t&&o&&o.disable()},0),this.isSquareMode=!1,{rectangle:t}},onMouseDown(t,e){console.log("onMouseDown"),e.preventDefault(),this.onMouseDownOrTouchStart(t,e)},onTouchStart(t,e){console.log("onTouchStart"),e.preventDefault(),this.onMouseDownOrTouchStart(t,e)},onMouseMove(t,e){console.log("onMouseMove"),t.startPoint&&this.updateDrawingWhileDraggingOrMouseMove(t,e)},onDrag(t,e){console.log("onDrag"),t.startPoint&&this.updateDrawingWhileDraggingOrMouseMove(t,e)},onMouseUp(t,e){console.log("onMouseUp"),this.finishDrawing(t,e)},onStop(t){var e;console.log("onStop"),e=this,setTimeout(()=>{const t=e._ctx&&e._ctx.store,o=e.map&&e.map;(o||t.getInitialValue)&&t.getInitialConfigValue("doubleClickZoom")&&o.doubleClickZoom.enable()},0),this.updateUIClasses({mouse:"none"}),this.getFeature(t.rectangle.id)&&(t.rectangle.removeCoordinate("0.4"),t.rectangle.isValid()?this.map.fire("draw.create",{features:[t.rectangle.toGeoJSON()]}):(this.deleteFeature([t.rectangle.id],{silent:!0}),this.changeMode("simple_select",{},{silent:!0})))},onTrash(t){console.log("onTrash"),this.deleteFeature([t.rectangle.id],{silent:!0}),this.changeMode("simple_select")},onKeyUp(t,e){if(27===e.keyCode)return this.onTrash(t);16===e.keyCode&&(this.isSquareMode=!1)},onKeyDown(t,e){16===e.keyCode&&(this.isSquareMode=!0)},updateDrawingWhileDraggingOrMouseMove(t,e){if(console.log(this.isSquareMode),this.isSquareMode){const o=a(t.startPoint,[e.lngLat.lng,t.startPoint[1]],{units:"kilometers"}),r=a(t.startPoint,[t.startPoint[0],e.lngLat.lat],{units:"kilometers"}),n=s(t.startPoint,[e.lngLat.lng,e.lngLat.lat]);if(o>r){const r=i(t.startPoint,o,n+90<180&&n+90>0?0:180,{units:"kilometers"}).geometry.coordinates;t.rectangle.updateCoordinate("0.1",e.lngLat.lng,t.startPoint[1]),t.rectangle.updateCoordinate("0.2",e.lngLat.lng,r[1]),t.rectangle.updateCoordinate("0.3",t.startPoint[0],r[1])}else{const o=i(t.startPoint,r,n>0?90:270,{units:"kilometers"}).geometry.coordinates;t.rectangle.updateCoordinate("0.1",o[0],t.startPoint[1]),t.rectangle.updateCoordinate("0.2",o[0],e.lngLat.lat),t.rectangle.updateCoordinate("0.3",t.startPoint[0],e.lngLat.lat)}t.rectangle.updateCoordinate("0.4",t.startPoint[0],t.startPoint[1])}else t.rectangle.updateCoordinate("0.1",e.lngLat.lng,t.startPoint[1]),t.rectangle.updateCoordinate("0.2",e.lngLat.lng,e.lngLat.lat),t.rectangle.updateCoordinate("0.3",t.startPoint[0],e.lngLat.lat),t.rectangle.updateCoordinate("0.4",t.startPoint[0],t.startPoint[1])},onMouseDownOrTouchStart(t,e){if(t.startPoint)this.finishDrawing(t,e);else{const o=[e.lngLat.lng,e.lngLat.lat];t.startPoint=o,t.rectangle.updateCoordinate("0.0",t.startPoint[0],t.startPoint[1])}},finishDrawing(t,e){t.endPoint=[e.lngLat.lng,e.lngLat.lat],this.updateUIClasses({mouse:"pointer"}),this.changeMode("simple_select",{featuresId:t.rectangle.id})},toDisplayFeatures(t,e,o){const r=e.properties.id===t.rectangle.id;e.properties.active=r.toString(),r?t.startPoint&&o(e):o(e)}}}();
